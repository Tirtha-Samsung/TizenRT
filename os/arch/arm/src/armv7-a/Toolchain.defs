############################################################################
# arch/arm/src/armv7-a/Toolchain.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

# Setup for the selected toolchain

#
# Handle old-style chip-specific toolchain names in the absence of
# a new-style toolchain specification, force the selection of a single
# toolchain and allow the selected toolchain to be overridden by a
# command-line selection.
#

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_ATOLLIC) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= ATOLLIC
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_BUILDROOT) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= BUILDROOT
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_CODEREDL) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= CODEREDL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_CODEREDW) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= CODEREDW
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_CODESOURCERYL) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= CODESOURCERYL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_CODESOURCERYW) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= CODESOURCERYW
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_DEVKITARM) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= DEVKITARM
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_RAISONANCE) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= RAISONANCE
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_GNU_EABIL) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= GNU_EABIL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_GNU_EABIW) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= GNU_EABIW
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_CLANGL) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= CLANGL
endif

ifeq ($(filter y, \
      $(CONFIG_ARMV7A_TOOLCHAIN_CLANGW) \
    ),y)
  CONFIG_ARMV7A_TOOLCHAIN ?= CLANGW
endif

#
# Supported toolchains
#
# TODO - It's likely that all of these toolchains now support the
#        CortexM4.  Since they are all GCC-based, we could almost
#        certainly simplify this further.
#
# Each toolchain definition should set:
#
#  CROSSDEV         The GNU toolchain triple (command prefix)
#  ARCROSSDEV       If required, an alternative prefix used when
#                   invoking ar and nm.
#  ARCHCPUFLAGS     CPU-specific flags selecting the instruction set
#                   FPU options, etc.
#  MAXOPTIMIZATION  The maximum optimization level that results in
#                   reliable code generation.
#

ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  MAXOPTIMIZATION := $(CONFIG_DEBUG_OPTLEVEL)
endif

ifeq ($(CONFIG_ARCH_CORTEXA5),y)
  ARCHCPUFLAGS += -mcpu=cortex-a5
  ZARCHCPUFLAGS := -mcpu=cortex_a5
else ifeq ($(CONFIG_ARCH_CORTEXA7),y)
  ARCHCPUFLAGS += -mcpu=cortex-a7
  ZARCHCPUFLAGS := -mcpu=cortex_a7
else ifeq ($(CONFIG_ARCH_CORTEXA8),y)
  ARCHCPUFLAGS += -mcpu=cortex-a8
  ZARCHCPUFLAGS := -mcpu=cortex_a8
else ifeq ($(CONFIG_ARCH_CORTEXA9),y)
  ARCHCPUFLAGS += -mcpu=cortex-a9
  ZARCHCPUFLAGS := -mcpu=cortex_a9
else ifeq ($(CONFIG_ARCH_CORTEXA32),y)
  ARCHCPUFLAGS += 
  ZARCHCPUFLAGS := -mcpu=cortex_a32
endif

ifneq ($(CONFIG_ARM_DPFPU32),y)
  ARCHFPUD16 = -d16
endif

# Cortex-A5  | -mfpu=vfpv4-fp16 | -mfpu=vfpv4-d16-fp16 | -mfpu=neon-fp16
# Cortex-A7  | -mfpu=vfpv4      | -mfpu=vfpv4-d16      | -mfpu=neon-vfpv4
# Cortex-A8  | -mfpu=vfpv3      |                      | -mfpu=neon (alias for neon-vfpv3)
# Cortex-A9  | -mfpu=vfpv3-fp16 | -mfpu=vfpv3-d16-fp16 | -mfpu=neon-fp16
# Cortex-A15 | -mfpu=vfpv4      |                      | -mfpu=neon-vfpv4

ifeq ($(CONFIG_ARCH_FPU),y)
  ifeq ($(CONFIG_ARM_FPU_ABI_SOFT),y)
    ARCHCPUFLAGS += -mfloat-abi=softfp
  else
    ARCHCPUFLAGS += -mfloat-abi=hard
  endif

  ifeq ($(CONFIG_ARM_NEON),y)
    ARCHNEON = neon-
  endif
  ifeq ($(CONFIG_ARCH_CORTEXA8),y)
    ARCHFPU = vfpv3
  else ifeq ($(CONFIG_ARCH_CORTEXA32),y)
    ARCHFPU = vfpv3
  else ifeq ($(CONFIG_ARCH_CORTEXA9),y)
    ARCHFPU = vfpv3
  else
    ARCHFPU = vfpv4
  endif
  ARCHCPUFLAGS += -mfpu=$(ARCHNEON)$(ARCHFPU)$(ARCHFPUD16)

else
  ARCHCPUFLAGS += -mfloat-abi=soft
endif

ifeq ($(CONFIG_ARM_TOOLCHAIN_ARMCLANG),y)

  ifeq ($(CONFIG_ARCH_CORTEXA5),y)
    LDCPUFLAGS = Cortex-A5
  else ifeq ($(CONFIG_ARCH_CORTEXA7),y)
    LDCPUFLAGS = Cortex-A7
  else ifeq ($(CONFIG_ARCH_CORTEXA8),y)
    LDCPUFLAGS = Cortex-A8
#Added 
  else ifeq ($(CONFIG_ARCH_CORTEXA32),y)
    LDCPUFLAGS = 
#####################
  else ifeq ($(CONFIG_ARCH_CORTEXA9),y)
    LDCPUFLAGS = Cortex-A9
  endif

  ifeq ($(CONFIG_ARCH_FPU),)
    LDFLAGS += --cpu=$(LDCPUFLAGS).no_neon.no_vfp
  else ifeq ($(CONFIG_ARM_NEON),)
    LDFLAGS += --cpu=$(LDCPUFLAGS).no_neon
  else
    LDFLAGS += --cpu=$(LDCPUFLAGS)
  endif

endif

# Generic GNU EABI toolchain on OS X, Linux or any typical Posix system

ifeq ($(CONFIG_ARMV7A_TOOLCHAIN),GNU_EABIL)
  MEMSTATS = gnueabil
  CROSSDEV ?= arm-none-eabi-
  ARCROSSDEV ?= arm-none-eabi-
  MAXOPTIMIZATION ?= -Os
  ifeq ($(CONFIG_ARCH_CORTEXA8),y)
    ifeq ($(CONFIG_ARCH_FPU),y)
      ARCHCPUFLAGS = -mcpu=cortex-a8 -mthumb -mfloat-abi=hard -mfpu=fpv5-sp-d16
    else
      ARCHCPUFLAGS = -mcpu=cortex-a8 -mthumb -mfloat-abi=soft
    endif
#Added
  else ifeq ($(CONFIG_ARCH_CORTEXA32),y)
    ifeq ($(CONFIG_ARCH_FPU),y)
      ARCHCPUFLAGS = -mthumb -mfloat-abi=hard -mfpu=fpv5-sp-d16
    else
      ARCHCPUFLAGS = -mthumb -mfloat-abi=soft
    endif

  else ifeq ($(CONFIG_ARCH_CORTEXM55),y)
    ifeq ($(CONFIG_ARCH_FPU),y)
      ARCHCPUFLAGS = -mcpu=cortex-m55 -mthumb -mfloat-abi=hard -mfpu=fpv5-sp-d16
    else
      ARCHCPUFLAGS = -mcpu=cortex-m55 -mthumb -mfloat-abi=soft
    endif
  endif
endif

